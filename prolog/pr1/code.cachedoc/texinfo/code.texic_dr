section_env([file_top_section,pragmas([]),paper_opts(1,afourpaper),coversec([],[],[[string_esc("Borja Martinena, b190242")]],[],nop,nop,[]),level(0)],global_label("Práctica 1"),[string_esc("Práctica 1")],[show_toc(subparts),section_env([unnumbered,level(1),subfile(intro)],global_label("code"),string_esc("code"),[[],[raw_nl,[[string_esc("The module contains the predicates specified for the first practical exercise of the "),em([string_esc("Programación Declarativa")]),string_esc(" "),string_esc("course at ETSIINF in the academic year 2021-2022."),p([]),noindent([]),string_esc("This is mostly composed of predicates dealing with simple byte operations. First binary and hexadecimal digits are defined:"),p([]),codeblock("text","
bind/1
hexd/1"),string_esc(" "),p([]),noindent([]),string_esc("And bytes, which are lists of either 8 bits/binds or 2 hexadecimal digits."),p([]),codeblock("text","
binary_byte/1
hex_byte/1
byte/1"),string_esc(" "),p([]),string_esc("The rest of the predicates are implemented with these considerations.")]],linebreak],[section_env([with_parent,level(2)],local_label("Usage and interface"),string_esc("Usage and interface"),cartouche(itemize_env(bullet,[[item([]),bf([string_esc("Library usage"),string_esc(":")]),linebreak,tt(string_esc(":- use_module(/home/bmcaos/Documents/IngInf/sem6/PROLOG/pr1/code.pl)."))],[item([]),bf([string_esc("Exports"),string_esc(":")]),linebreak,itemize_env(minus,[[[item([]),em([string_esc("Predicates"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("0"),string_esc("binary_byte/1"),string_esc("binary_byte/1")),string_esc(", ")],[idx_env(use,code,localnum_label("1"),string_esc("hex_byte/1"),string_esc("hex_byte/1")),string_esc(", ")],[idx_env(use,code,localnum_label("2"),string_esc("byte/1"),string_esc("byte/1")),string_esc(", ")],[idx_env(use,code,localnum_label("3"),string_esc("byte_list/1"),string_esc("byte_list/1")),string_esc(", ")],[idx_env(use,code,localnum_label("4"),string_esc("hex_to_bin/2"),string_esc("hex_to_bin/2")),string_esc(", ")],[idx_env(use,code,localnum_label("5"),string_esc("byte_conversion/2"),string_esc("byte_conversion/2")),string_esc(", ")],[idx_env(use,code,localnum_label("6"),string_esc("byte_list_conversion/2"),string_esc("byte_list_conversion/2")),string_esc(", ")],[idx_env(use,code,localnum_label("7"),string_esc("tail/3"),string_esc("tail/3")),string_esc(", ")],[idx_env(use,code,localnum_label("8"),string_esc("get_nth_bit_from_byte/3"),string_esc("get_nth_bit_from_byte/3")),string_esc(", ")],[idx_env(use,code,localnum_label("9"),string_esc("byte_list_clsh/2"),string_esc("byte_list_clsh/2")),string_esc(", ")],[idx_env(use,code,localnum_label("10"),string_esc("byte_list_crsh/2"),string_esc("byte_list_crsh/2")),string_esc(", ")],[idx_env(use,code,localnum_label("11"),string_esc("xor/3"),string_esc("xor/3")),string_esc(", ")],[idx_env(use,code,localnum_label("12"),string_esc("byte_xor/3"),string_esc("byte_xor/3")),string_esc(".")]],raw_nl]],nop,[item([]),em([string_esc("Properties"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("13"),string_esc("bind/1"),string_esc("bind/1")),string_esc(", ")],[idx_env(use,code,localnum_label("14"),string_esc("hexd/1"),string_esc("hexd/1")),string_esc(".")]],raw_nl]],nop,nop,nop],nop])],nop,nop,nop,nop]))),[],[],section_env([with_parent,level(2)],local_label("Documentation on exports"),string_esc("Documentation on exports"),[[defpred(local_label("bind/1"),prop,"PROPERTY",bind/1,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("bind(D)")),string_esc([])],raw_nl],[var([string_esc("D")]),string_esc(" "),string_esc("is a binary digit. "),noindent([]),env_(verbatim,[raw_string("bind(0).
bind(1).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("binary_byte/1"),pred,"PREDICATE",binary_byte/1,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("binary_byte(B)")),string_esc([])],raw_nl],[var([string_esc("B")]),string_esc(" "),string_esc("is a binary byte. A binary byte is a list of binary digits of length 8."),p([]),codeblock("text","
binary_byte([bind(B7), bind(B6), bind(B5), bind(B4),
             bind(B3), bind(B2), bind(B1), bind(B0)]) :-
        bind(B7),
        bind(B6),
        bind(B5),
        bind(B4),
        bind(B3),
        bind(B2),
        bind(B1),
        bind(B0).")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("hexd/1"),prop,"PROPERTY",hexd/1,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("hexd(D)")),string_esc([])],raw_nl],[var([string_esc("D")]),string_esc(" "),string_esc("is a hexadecimal digit. "),noindent([]),env_(verbatim,[raw_string("hexd(0).
hexd(1).
hexd(2).
hexd(3).
hexd(4).
hexd(5).
hexd(6).
hexd(7).
hexd(8).
hexd(9).
hexd(a).
hexd(b).
hexd(c).
hexd(d).
hexd(e).
hexd(f).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("hex_byte/1"),pred,"PREDICATE",hex_byte/1,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("hex_byte(B)")),string_esc([])],raw_nl],[var([string_esc("B")]),string_esc(" "),string_esc("is a hexadecimal byte. A binary byte is a list of binary digits of length 8. "),noindent([]),env_(verbatim,[raw_string("hex_byte([hexd(H1),hexd(H0)]) :-
    hexd(H1),
    hexd(H0).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("byte/1"),pred,"PREDICATE",byte/1,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte(B)")),string_esc([])],raw_nl],[var([string_esc("B")]),string_esc(" "),string_esc("is a byte that is: a binary byte or a hexadecimal byte. "),noindent([]),env_(verbatim,[raw_string("byte(BB) :-
    binary_byte(BB).
byte(HB) :-
    hex_byte(HB).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("byte_list/1"),pred,"PREDICATE",byte_list/1,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte_list(BL)")),string_esc([])],raw_nl],[string_esc("True if "),var([string_esc("BL")]),string_esc(" "),string_esc("is a list of valid bytes.")],assrtprops([],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list(BL)")),string_esc([])],raw_nl],[string_esc("Un byte hexadecimal.")],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("15"),string_esc("BL=[[hexd(a),hexd(b)]]"),string_esc("BL=[[hexd(a),hexd(b)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("16"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("17"),string_esc("()(BL)"),string_esc("()(BL)"))],raw_nl],[string_esc(" (undefined property)"),[]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list(BL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("18"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list(BL)")),string_esc([])],raw_nl],[string_esc("Tres bytes hexadecimal.")],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("19"),string_esc("BL=[[hexd(9),hexd(6)],[hexd(5),hexd(c)],[hexd(d),hexd(f)]]"),string_esc("BL=[[hexd(9),hexd(6)],[hexd(5),hexd(c)],[hexd(d),hexd(f)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("20"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("21"),string_esc("()(BL)"),string_esc("()(BL)"))],raw_nl],[string_esc(" (undefined property)"),[]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list(BL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("22"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list(BL)")),string_esc([])],raw_nl],[string_esc("Un byte binario.")],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("23"),string_esc("BL=[[bind(1),bind(0),bind(0),bind(0),bind(0),bind(1),bind(1),bind(0)]]"),string_esc("BL=[[bind(1),bind(0),bind(0),bind(0),bind(0),bind(1),bind(1),bind(0)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("24"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("25"),string_esc("()(BL)"),string_esc("()(BL)"))],raw_nl],[string_esc(" (undefined property)"),[]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list(BL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("26"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("hex_to_bin/2"),pred,"PREDICATE",hex_to_bin/2,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("hex_to_bin(HD,BN)")),string_esc([])],raw_nl],[string_esc("True if "),var([string_esc("HD")]),string_esc(", a hexadecimal digit is equal in value to "),var([string_esc("BN")]),string_esc(", a binary nibble. Used to convert hex digits to binary."),p([]),codeblock("text","
?- hex_to_bin(hexd(b), BN).
BN = [bind(1), bind(0), bind(1), bind(1)] ? ;
no."),string_esc(" ")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("byte_conversion/2"),pred,"PREDICATE",byte_conversion/2,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte_conversion(HB,BB)")),string_esc([])],raw_nl],[string_esc("True if "),var([string_esc("HB")]),string_esc(", a hex byte, is equal in value to "),var([string_esc("BB")]),string_esc(", a binary byte. Used to convert hex bytes to binary."),p([]),codeblock("text","
?- byte_conversion([hexd(b), hexd(f)], BB).
BB = [bind(1), bind(0), bind(1), bind(1),
      bind(1), bind(1), bind(1), bind(1)] ? ;
no."),string_esc(" ")],assrtprops([],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_conversion(HB,BB)")),string_esc([])],raw_nl],[string_esc("Byte máximo.")],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("27"),string_esc("HB=[hexd(f),hexd(f)]"),string_esc("HB=[hexd(f),hexd(f)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("28"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("29"),string_esc("BB=[bind(1),bind(1),bind(1),bind(1),bind(1),bind(1),bind(1),bind(1)]"),string_esc("BB=[bind(1),bind(1),bind(1),bind(1),bind(1),bind(1),bind(1),bind(1)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("30"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_conversion(HB,BB)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("31"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_conversion(HB,BB)")),string_esc([])],raw_nl],[string_esc("Byte con valor 1.")],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("32"),string_esc("HB=[hexd(0),hexd(1)]"),string_esc("HB=[hexd(0),hexd(1)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("33"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("34"),string_esc("BB=[bind(0),bind(0),bind(0),bind(0),bind(0),bind(0),bind(0),bind(1)]"),string_esc("BB=[bind(0),bind(0),bind(0),bind(0),bind(0),bind(0),bind(0),bind(1)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("35"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_conversion(HB,BB)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("36"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_conversion(HB,BB)")),string_esc([])],raw_nl],[string_esc("Conversion binario a hexadecimal.")],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("37"),string_esc("BB=[bind(1),bind(1),bind(1),bind(1),bind(0),bind(0),bind(0),bind(1)]"),string_esc("BB=[bind(1),bind(1),bind(1),bind(1),bind(0),bind(0),bind(0),bind(1)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("38"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("39"),string_esc("HB=[hexd(f),hexd(1)]"),string_esc("HB=[hexd(f),hexd(1)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("40"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_conversion(HB,BB)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("41"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("byte_list_conversion/2"),pred,"PREDICATE",byte_list_conversion/2,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte_list_conversion(HBL,BBL)")),string_esc([])],raw_nl],[string_esc("True if "),var([string_esc("HBL")]),string_esc(", a hex byte list, is equal in value to "),var([string_esc("BBL")]),string_esc(", a binary byte list. Used to convert hex bytes lists to binary."),p([]),string_esc("Two empty lists are considered to be equal in value. Tests with lists longer than length 1 will cause a TeX hbox overflow in trying to display the binary bite list."),p([]),codeblock("text","
?- byte_list_conversion([[hexd(b), hexd(f)]], BN).
BN = [[bind(1), bind(0), bind(1), bind(1),
       bind(1), bind(1), bind(1), bind(1)]] ? ;
no."),string_esc(" ")],assrtprops([],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_list_conversion(HBL,BBL)")),string_esc([])],raw_nl],[string_esc("Regular call with list of length 1.")],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("42"),string_esc("HB=[[hexd(4),hexd(4)]]"),string_esc("HB=[[hexd(4),hexd(4)]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("43"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("44"),string_esc("BB=[bind(1),bind(1),bind(1),bind(1),bind(1),bind(1),bind(1),bind(1)]"),string_esc("BB=[bind(1),bind(1),bind(1),bind(1),bind(1),bind(1),bind(1),bind(1)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("45"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_list_conversion(HBL,BBL)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("46"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("tail/3"),pred,"PREDICATE",tail/3,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("tail(L,R,T)")),string_esc([])],raw_nl],[string_esc("Provides a way to access lists in reverse order, instead of accessing them via head/tail, "),var([string_esc("R")]),string_esc(" "),string_esc("is the leading part of the list (rest), and "),var([string_esc("T")]),string_esc(" "),string_esc("is the last item (tail)."),p([]),string_esc("However, this operation has linear complexity, to access lists in reverse order, it would be more efficient to reverse them.")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("get_nth_bit_from_byte/3"),pred,"PREDICATE",get_nth_bit_from_byte/3,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[string_esc("True if "),var([string_esc("BN")]),string_esc(" "),string_esc("is equivalent to the bit at position "),var([string_esc("N")]),string_esc(" "),string_esc("of the byte "),var([string_esc("B")]),string_esc("."),p([]),string_esc("Used to get the bit at position "),var([string_esc("N")]),string_esc(" "),string_esc("of the byte where "),var([string_esc("N")]),string_esc(" "),string_esc("is a natural number expresed in terms of Peano's axioms, that is, as the succesor of another number recursively until reaching 0."),p([]),string_esc("Bytes are big endian so the 0th bit is actually the last. This predicate is quite inefficient because it uses the tail/1 predicate, which has linear time complexity, in each recursive step.")],assrtprops([],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("47"),string_esc("N=s(s(0))"),string_esc("N=s(s(0))"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("48"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("49"),string_esc("B=[hexd(0),hexd(4)]"),string_esc("B=[hexd(0),hexd(4)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("50"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("51"),string_esc("BN=bind(1)"),string_esc("BN=bind(1)"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("52"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("53"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl])),defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("get_nth_bit_from_byte(N,B,BN)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("54"),string_esc("BN=bind(1)"),string_esc("BN=bind(1)"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("55"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("56"),string_esc("B=[hexd(0),hexd(8)]"),string_esc("B=[hexd(0),hexd(8)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("57"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("58"),string_esc("N=s(s(s(0)))"),string_esc("N=s(s(s(0)))"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("59"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("get_nth_bit_from_byte(N,B,BN)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("60"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("byte_list_clsh/2"),pred,"PREDICATE",byte_list_clsh/2,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte_list_clsh(L,CLShL)")),string_esc([])],raw_nl],[string_esc("Performs a circular left shift on byte list "),var([string_esc("L")]),string_esc("."),p([]),tt([string_esc("NOT IMPLEMENTED")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("byte_list_crsh/2"),pred,"PREDICATE",byte_list_crsh/2,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte_list_crsh(L,CLShL)")),string_esc([])],raw_nl],[string_esc("Performs a circular right shift on byte list "),var([string_esc("L")]),string_esc("."),p([]),tt([string_esc("NOT IMPLEMENTED")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("xor/3"),pred,"PREDICATE",xor/3,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("xor(B1,B2,BR)")),string_esc([])],raw_nl],[string_esc("Implements the logical gate xor for two bit "),var([string_esc("B1")]),string_esc(" "),string_esc("and "),var([string_esc("B2")]),string_esc(" "),string_esc("with a result "),var([string_esc("BR")]),string_esc(". "),env_(verbatim,[raw_string("xor(bind(0),bind(0),bind(0)).
xor(bind(0),bind(1),bind(1)).
xor(bind(1),bind(0),bind(1)).
xor(bind(1),bind(1),bind(0)).
")]),string_esc(" ")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("byte_xor/3"),pred,"PREDICATE",byte_xor/3,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("byte_xor(B1,B2,B3)")),string_esc([])],raw_nl],[string_esc("Implements a bitwise XOR operation between two input bytes "),var([string_esc("B1")]),string_esc(" "),string_esc("and "),var([string_esc("B2")]),string_esc(". Hex bytes are first converted to binary bytes and then the xor predicate is used recursively on each bit."),p([]),var([string_esc("B3")]),string_esc(" "),string_esc("is the output byte."),p([]),string_esc("Three empty lists B1 = [], B2 = [] and B3 = [] will validate this predicate.")],assrtprops([],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("byte_xor(B1,B2,B3)")),string_esc([])],raw_nl],[],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("61"),string_esc("B1=[hexd(a),hexd(b)]"),string_esc("B1=[hexd(a),hexd(b)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("62"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("63"),string_esc("B2=[hexd(4),hexd(f)]"),string_esc("B2=[hexd(4),hexd(f)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("64"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("65"),string_esc("B3=[hexd(e),hexd(4)]"),string_esc("B3=[hexd(e),hexd(4)]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("66"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("byte_xor(B1,B2,B3)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("67"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl]]),[],[],section_env([with_parent,level(2)],local_label("Documentation on imports"),string_esc("Documentation on imports"),[string_esc("This module has the following direct dependencies:"),itemize_env(minus,[nop,nop,nop,[item([]),em([string_esc("Internal (engine) modules"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("68"),string_esc("term_basic"),string_esc("term_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("69"),string_esc("arithmetic"),string_esc("arithmetic")),string_esc(", ")],[idx_env(use,code,localnum_label("70"),string_esc("atomic_basic"),string_esc("atomic_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("71"),string_esc("basiccontrol"),string_esc("basiccontrol")),string_esc(", ")],[idx_env(use,code,localnum_label("72"),string_esc("exceptions"),string_esc("exceptions")),string_esc(", ")],[idx_env(use,code,localnum_label("73"),string_esc("term_compare"),string_esc("term_compare")),string_esc(", ")],[idx_env(use,code,localnum_label("74"),string_esc("term_typing"),string_esc("term_typing")),string_esc(", ")],[idx_env(use,code,localnum_label("75"),string_esc("debugger_support"),string_esc("debugger_support")),string_esc(", ")],[idx_env(use,code,localnum_label("76"),string_esc("basic_props"),string_esc("basic_props")),string_esc(".")]],raw_nl]],[item([]),em([string_esc("Packages"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("77"),string_esc("prelude"),string_esc("prelude")),string_esc(", ")],[idx_env(use,code,localnum_label("78"),string_esc("initial"),string_esc("initial")),string_esc(", ")],[idx_env(use,code,localnum_label("79"),string_esc("condcomp"),string_esc("condcomp")),string_esc(", ")],[idx_env(use,code,localnum_label("80"),string_esc("assertions"),string_esc("assertions")),string_esc(", ")],[idx_env(use,code,localnum_label("81"),string_esc("assertions/assertions_basic"),string_esc("assertions/assertions_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("82"),string_esc("regtypes"),string_esc("regtypes")),string_esc(".")]],raw_nl]]])])]]),section_env([unnumbered,level(1),subfile(refs),is_special(references)],global_label("References"),string_esc("References"),[show_biblio])]).